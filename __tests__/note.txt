import configureStore  from 'redux-mock-store';

import React from 'react';
// import { Provider } from 'react-redux';
// import renderer from 'react-test-renderer';
// import { cleanup } from '@testing-library/react-native';
// import configureStore from 'redux-mock-store';

// import { inputValidation } from "../redux/Checkout/checkout.action";
// import checkoutReducer from '../redux/Checkout/checkout.reducer';
// import CheckoutTypes from '../redux/Checkout/checkout.types';
// import store, { persistor } from '../redux/createStore';
// import { PersistGate } from 'redux-persist/integration/react';
// import { Provider } from 'react-redux';
import CheckOutDetail from '../components/checkout/checkoutDetail';
import { inputValidation } from '../redux/Checkout/checkout.action';

import { render , cleanup } from './../test-utils'
import checkoutReducer from '../redux/Checkout/checkout.reducer';
import CheckoutTypes from '../redux/Checkout/checkout.types';

// afterEach(cleanup)
//const { configureStore:any } = require('redux-mock-store')

const middlewares:any = []
const mockStore = configureStore(middlewares)

describe("checkout", () => {
    // const dispatch = jest.fn()
    
    afterEach(cleanup)

    // const inputValidation = () => ({type:"VALID_INPUT"})
    test("dispatch action", async() =>{

        const INITIAL_STATE = {}

        const store = mockStore(INITIAL_STATE)
        
        const data:any = {
            "CVC code": "",
            "Card holder name": "",
            "Card number": "",
            "City": "",
            "Email": "",
            "First name": "",
            "Last name": "",
            "Phone": "",
            "PostCode": "",
            "Street Address": "",
        }
        // store.dispatch(inputValidation())

        // const actions = store.getActions()
        // const expectedPayload = { type : "VALID_INPUT"}
        // expect(actions).toEqual([expectedPayload])

        const expectedPayload = false

        const expectedActions = [{
            type:CheckoutTypes.VALID_INPUT,
            payload:expectedPayload
        }]


        // store.dispatch(inputValidation(data))
        expect(store.getActions()).toEqual(expectedActions)

    })


    test("check end of dispatch pipeline", async() => {
        
    })
})




// const renderComponent = () => render(
//     <Provider store = {store}>
//         <PersistGate persistor={persistor}>
//             <CheckOutDetail/>
//         </PersistGate>
//     </Provider>
//   );
  
//   test('render validation followed by checkout inputs', async() => {
//     const { queryByText, getByText } = renderComponent();


//     //   await inputValidation()
//   })
